---
- name: Pull facts on target_server {{ target_server }}
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in vsc_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < vsc_target_server_memory_mb_min

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < vsc_target_server_vcpus_min

- name: Verify that the VM is not already running
  assert:
    that: "{{ item }} is defined"
    msg: "Mandatory bridge {{ item }} is not defined in config!"
  with_items:
    - mgmt_bridge
    - data_bridge
  delegate_to: localhost


- name: Check bridge availability on hypervisor
  when: item.bridge not in ansible_interfaces and item.bridge != 'None'
  set_fact:
     vsc_{{ item.fact }}: True
  with_items:
    - { fact: 'mgmt_bridge' , bridge: "{{ mgmt_bridge }}", ipv4: "{{ mgmt_bridge_address | default ('None') }}", prefix: "{{ mgmt_bridge_prefix | default ('None') }}" }
    - { fact: 'data_bridge' , bridge: "{{ data_bridge }}", ipv4: "{{ data_bridge_address | default ('None') }}", prefix: "{{ data_bridge_prefix | default ('None') }}" }
  register: bridge_availability

# TODO: check real memory
#- name: Check target bridges
#  fail: msg="Required network bridges are not found"
#  when: (mgmt_bridge not in ansible_interfaces) or
#        (data_bridge not in ansible_interfaces)

- name: Check IP@ that assigned on the bridges is not used already on hypervisor
  fail:
    msg: "Bridge {{ item.item.bridge }} should be provisioned but IP@ {{ item.item.ipv4 }} to be assigned is used already!"
  when: item.ansible_facts is defined and item.item.ipv4 != 'None' and item.item.prefix != 'None' and item.item.ipv4 in ansible_all_ipv4_addresses
  with_items: '{{ bridge_availability.results }}'
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- block:

  - name: Bridges creation using nmcli module
    # Example of nmcli: nmcli connection add type bridge con-name nulldata2 save yes autoconnect yes  \
    # ipv4.method manual ipv4.addresses '10.88.44.1/24' connection.interface-name nulldata2  stp False connection.id nulldata2
    nmcli:
      autoconnect: yes
      conn_name: "{{ item.item.bridge }}"
      ifname: "{{ item.item.bridge }}"
      state: present
      stp: "{{ bridge_config.stp }}"
      type: bridge
      ip4: "{{ item.item.ipv4 }}/{{ item.item.prefix }}"
    #Can be used for debug purposes
    #debug:
    #  msg: "{{ item.item.bridge }} should be created"
    ignore_errors: True
    when: "item.ansible_facts is defined and item.item.ipv4 != 'None' and item.item.prefix != 'None'"
    with_items: '{{ bridge_availability.results }}'
    register: nm_bridge_creation

  - name: DEBUG | nm module bridge creation failed
    debug:
      var: nm_bridge_creation
    when: nm_bridge_creation | failed

  - name: Bridges creation using nmcli tool
    # Example of nmcli: nmcli connection add type bridge con-name nulldata2 save yes autoconnect yes  \
    # ipv4.method manual ipv4.addresses '10.88.44.1/24' connection.interface-name nulldata2  stp False connection.id nulldata2
    command: >
      nmcli connection add type bridge con-name "{{ item.item.bridge }}" save yes
      autoconnect yes {% if item.item.ipv4 != 'None' and item.item.prefix != 'None' %} ipv4.method manual ipv4.addresses "{{ item.item.ipv4 }}/{{ item.item.prefix }}" {% endif %}
      connection.interface-name "{{ item.item.bridge }}" stp "{{ bridge_config.stp }}"
      connection.id "{{ item.item.bridge }}"
    #Can be used for debug purposes
    #debug:
    #  msg: "{{ item.item.bridge }} should be created"
    when: 'item.ansible_facts is defined and nm_bridge_creation.failed == True'
    with_items: '{{ bridge_availability.results }}'
    register: cmd_bridge_creation
    failed_when: "'successfully added' not in cmd_bridge_creation.stdout"
    changed_when: "'successfully added' in cmd_bridge_creation.stdout"
  
  - name: DEBUG | nmcli bridge creation failed
    debug:
      var: cmd_bridge_creation
    when: cmd_bridge_creation | failed

  when: bridge_config.nm_controlled == True
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- block:

  - name: Create sysconfig script for bridges
    template:
      src: ifcfg-br.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ item.item.bridge }}"
      owner: root
      group: root
      mode: '0644'
      backup: yes
      force: yes
    when: item.ansible_facts is defined
    with_items: '{{ bridge_availability.results }}'
    register: bridge_sysconfig_creation
    notify: new_bridge_created
  
  - meta: flush_handlers

  when: bridge_config.nm_controlled == False
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- block:
  - name: Install packages for RedHat OS family distros needed for VSC instantiation
    yum: 
      name: "{{ item }}"
      state: present
    with_items:
     - qemu-kvm
     - libvirt
     - bridge-utils
     - libguestfs-tools
     - libvirt-python

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  when: ansible_os_family | match("RedHat") 
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Install packages for Debian OS family distros
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"
  apt:
    name: "{{ item }}"
    state: present
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family | match("Debian")

- name: Pull facts on target_server
  action: setup
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Check target bridges
  fail:
    msg: "Required network bridges are not found"
  when: (mgmt_bridge not in ansible_interfaces) or (data_bridge not in ansible_interfaces)

- name: Get a list of VMs from hypervisor
  virt:
    command: list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that the VM is not already running
  assert:
    that: "vmname not in virt_vms.list_vms"
    msg: "{{ vmname }} is already running on {{ target_server }}"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  register: chk_vm_exists

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create VSC directory
  file: path={{ images_path }}/{{ vmname }} state=directory owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Check if {{ images_path }} contain VM files already and stop if images_path_override is True, value is {{ images_path_override }}
  command: "test -e {{ images_path }}/{{ vmname }}/{{ hostname }}.qcow2"
  ignore_errors: False
  register: chk_vm_image_exists
  when: images_path_override == False
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy VSC qcow2 image to {{ target_server }} 
  copy:
    src: "{{ vsc_qcow2_path }}/{{ vsc_qcow2_file_name }}"
    dest: "{{ images_path }}/{{ vmname }}/{{ hostname }}.qcow2"
    owner: "{{ libvirt.user }}"
    group: "{{ libvirt.group }}"
  when: images_path_override == True or chk_vm_image_exists|failed
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"


- name: Setup VSC temporary configuration files bof.cfg and config.cfg in {{ images_path }}/{{ vmname }}
  template:
    src: "{{ item }}.j2"
    backup: no
    dest: "{{ images_path }}/{{ vmname }}/{{ item }}"
  with_items:
    - bof.cfg
    - config.cfg
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy temporary configuration files to the VSC image using guestfish
  command: "guestfish --rw -a {{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2 run : mount {{ vsc_partition }} / : copy-in {{ images_path }}/{{ vmname }}/{{ item }} /"
  with_items:
    - bof.cfg
    - config.cfg
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Remove temporary configuration files from {{ images_path }}/{{ vmname }}
  file:
    path: "{{ images_path }}/{{ vmname }}/{{ item }}"
    state: absent
  with_items:
    - bof.cfg
    - config.cfg
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Define VSC guest VM
  virt:
    name: "{{ vmname }}"
    command: define
    xml: "{{ lookup('template', 'vsc.xml.j2') }}"
    uri: qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Mark VSC as autostart
  virt: 
    name: "{{ vmname }}"
    state: running
    autostart: True
    uri: qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  when: ansible_version.full | version_compare('2.3', '>=')

- block:
  - name: "Configure VM to autostart"
    command: virsh autostart {{ vmname }}
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: "Run VSC VM"
    virt: name="{{ vmname }}"
          state=running
          uri=qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  when: ansible_version.full | version_compare('2.3', '<')

- name: Get updated VM information from {{ target_server }}
  virt:
    command: info
  register: virt_info
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that VSC VM is running
  assert: { that: "virt_info['{{ vmname }}']['state'] == 'running'" }
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Wait for VSC ssh to be ready, trying to connect to {{ bof.mgmt_ip }}
  wait_for:
    port: 22
    host: "{{ bof.mgmt_ip }}"
    search_regex: OpenSSH
    delay: 30
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"


